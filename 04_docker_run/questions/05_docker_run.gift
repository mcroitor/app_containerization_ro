// # Întrebări la tema "Rularea aplicațiilor containerizate"

$CATEGORY: 05_docker_run/1_knowledge

::05k001:: [markdown] Ce comandă se utilizează pentru construirea imaginii?
{
  =[markdown] `docker image build`
  ~[markdown] `docker create`
  ~[markdown] `docker image run`
  ~[markdown] `docker image start`
}

::05k002:: [markdown] Cu ce comandă se poate vizualiza imaginile existente?
{
  =[markdown] `docker image ls`
  ~[markdown] `docker image show`
  ~[markdown] `docker view`
  ~[markdown] `docker list`
}

::05k003:: [markdown] Cu ce comandă se poate șterge imaginea?
{
  =[markdown] `docker image rm`
  ~[markdown] `docker delete`
  ~[markdown] `docker remove`
  ~[markdown] `docker remove image`
}

::05k004:: [markdown] Cu ce comandă se poate crea un container?
{
  =[markdown] `docker container create`
  ~[markdown] `docker image build`
  ~[markdown] `docker container build`
  ~[markdown] `docker container start`
}

::05k005:: [markdown] Cu ce comandă se poate porni containerul existent?
{
  =[markdown] `docker container start`
  ~[markdown] `docker container run`
  ~[markdown] `docker container create`
  ~[markdown] `docker container build`
}

::05k006:: [markdown] Cu ce comandă se poate comunica cu containerul?
{
  =[markdown] `docker container exec`
  ~[markdown] `docker container run`
  ~[markdown] `docker container start`
  ~[markdown] `docker container stop`
}

::05k007:: [markdown] Cu ce comandă se poate reporni containerul?{
  =[markdown] `docker container restart`
  ~[markdown] `docker container start`
  ~[markdown] `docker container run`
  ~[markdown] `docker container stop`
}

::05k008:: [markdown] Cu ce comandă se poate copia fișierele în container?{
  =[markdown] `docker container cp`
  ~[markdown] `docker container mv`
  ~[markdown] `docker container copy`
  ~[markdown] `docker container move`
}

::05k009:: [markdown] Cu ce comandă se poate citi log-urile containerului?{
  =[markdown] `docker container logs`
  ~[markdown] `docker container show`
  ~[markdown] `docker container view`
  ~[markdown] `docker container list`
}

::05k010:: [markdown] Cu ce comandă se poate vizualiza lista containerelor?{
  =[markdown] `docker container ls`
  ~[markdown] `docker ls container`
  ~[markdown] `docker container view`
  ~[markdown] `docker image list`
}

::05k011:: [markdown] Cu ce comandă se poate opri containerul?{
  =[markdown] `docker container stop`
  ~[markdown] `docker stop container`
  ~[markdown] `docker container remove`
  ~[markdown] `docker container delete`
}

::05k012:: [markdown] Cu ce comandă se poate șterge containerul?{
  =[markdown] `docker container rm`
  ~[markdown] `docker remove container`
  ~[markdown] `docker container delete`
  ~[markdown] `docker container prune`
}

::05k013:: [markdown] Fie dat fișierul `Dockerfile.sample`. Cu ce comandă se poate construi imaginea cu numele `myimage`?
{
  =[markdown] `docker image build -t myimage -f Dockerfile.sample .`
  ~[markdown] `docker image build -t myimage Dockerfile.sample`
  ~[markdown] `docker image build --name myimage --file Dockerfile.sample .`
  ~[markdown] `docker build -f Dockerfile.sample -t myimage`
}

::05k014:: [markdown] Fie dată imaginea `myimage:1.0`. Cu ce comandă se poate crea containerul cu numele `mycontainer`?
{
  =[markdown] `docker container create --name mycontainer myimage:1.0`
  ~[markdown] `docker container create --name myimage:1.0 mycontainer`
  ~[markdown] `docker create --name mycontainer myimage .`
  ~[markdown] `docker build --name mycontainer myimage:1.0`
}

::05k015:: [markdown] Fie dat containerul `mycontainer`. Cu ce comandă se poate porni containerul în modul daemon?
{
  =[markdown] `docker start -d mycontainer`
  ~[markdown] `docker run -d mycontainer`
  ~[markdown] `docker run -d --name mycontainer`
  ~[markdown] `docker start -d --name mycontainer`
}

::05k016:: [markdown] Fie dat containerul pornit `mycontainer`. Cu ce comandă se poate conecta la container cu comanda `/bin/bash` pentru interacțiunea cu shell-ul?
{
  =[markdown] `docker exec -it mycontainer /bin/bash`
  ~[markdown] `docker run mycontainer /bin/bash`
  ~[markdown] `docker start mycontainer /bin/bash`
  ~[markdown] `docker container exec mycontainer /bin/bash`
}

::05k017:: [markdown] Fie dat containerul pornit `mycontainer`. Cu ce comandă se poate citi ultimile 50 linii din log-urile containerului?
{
  =[markdown] `docker logs -n 50 mycontainer`
  ~[markdown] `docker container logs -f 50 mycontainer`
  ~[markdown] `docker container show 50 mycontainer`
  ~[markdown] `docker logs -f 50 mycontainer`
}

::05k018:: [markdown] Fie dat containerul pornit `mycontainer`. Cu ce comandă se poate opri containerul?
{
  =[markdown] `docker container stop mycontainer`
  ~[markdown] `docker stop container mycontainer`
  ~[markdown] `docker container rm mycontainer`
  ~[markdown] `docker container delete mycontainer`
}

::05k019:: [markdown] FIe dată imaginea `myimage`. Cu ce comandă se poate porni containerul cu numele `mycontainer` și portul `8080` redirecționat la portul `80`?
{
  =[markdown] `docker container run -d --name mycontainer -p 8080:80 myimage`
  ~[markdown] `docker run -d --name mycontainer --ports 8080:80 myimage`
  ~[markdown] `docker container run --name mycontainer -p 8080 myimage`
  ~[markdown] `docker run -d --name mycontainer --expose 8080:80 myimage`
}

::05k020:: [markdown] Fie dat containerul pornit `mycontainer`. Cu ce comandă se poate copia fișierul `file.txt` în rădăcina containerului?
{
  =[markdown] `docker container cp file.txt mycontainer:/`
  ~[markdown] `docker image cp mycontainer:/file.txt .`
  ~[markdown] `docker cp mycontainer:/file.txt /`
  ~[markdown] `docker container write file.txt mycontainer:/file.txt`
}

$CATEGORY: 05_docker_run/2_usage

// Întrebări de tip _"răspuns scurt"_:

::05u001:: [markdown] Pentru a construi o imagine `myimage` din `Dockerfile`, trebuie să executați comanda {=docker build -t myimage . =docker build --tag myimage . }

::05u002:: [markdown] Pentru a construi o imagine `webserver` din `Dockerfile.nginx`, trebuie să executați comanda {= docker build -t webserver -f Dockerfile.nginx . =docker build -t webserver --file Dockerfile.nginx . =docker build --tag webserver -f Dockerfile.nginx . =docker build --tag webserver --file Dockerfile.nginx . =docker build --file Dockerfile.nginx --tag webserver . =docker build -f Dockerfile.nginx --tag webserver . =docker build --file Dockerfile.nginx -t webserver . =docker build -f Dockerfile.nginx -t webserver . }

::05u003:: [markdown] Pentru a construi o imagine `sample` cu eticheta `1.0` din `Dockerfile`, trebuie să executați comanda {= docker build -t sample\:1.0 . =docker build --tag sample\:1.0 . }

::05u004:: [markdown] Pentru a construi o imagine `sample` din `Dockerfile`, care se află în directorul `php-fpm`, trebuie să executați comanda {= docker build -t sample\:1.0 php-fpm =docker build --tag sample\:1.0 php-fpm =docker build -t sample\:1.0 ./php-fpm =docker build --tag sample\:1.0 ./php-fpm =docker build -t sample\:1.0 php-fpm/ =docker build --tag sample\:1.0 php-fpm/ =docker build -t sample\:1.0 ./php-fpm/ =docker build --tag sample\:1.0 ./php-fpm/ }

::05u005:: [markdown] Pentru vizualizarea listei de imagini existente, utilizați comanda {=docker images}

::05u006:: [markdown] Pentru a șterge imaginea `sample`, utilizați comanda {=docker rmi sample}

::05u007:: [markdown] Pentru a șterge imaginile `sample` și `webserver`, utilizați comanda {=docker rmi sample webserver =docker rmi webserver sample}

::05u008:: [markdown] Pentru a crea un container `mycontainer` pe baza imaginii `myimage`, utilizați comanda {=docker create --name mycontainer myimage}

::05u009:: [markdown] Pentru a porni containerul `mycontainer`, utilizați comanda {=docker start mycontainer}

::05u010:: [markdown] Pentru a crea un container pe baza imaginii `mariadb` și a-l porni imediat, utilizați comanda {=docker run mariadb}

::05u011:: [markdown] Pentru a crea un container pe baza imaginii `mariadb` cu numele `mydb` și a-l porni imediat, utilizați comanda {=docker run --name mydb mariadb}

::05u012:: [markdown] Pentru a crea un container pe baza imaginii `nginx` cu numele `web` și a-l porni imediat în fundal, utilizați comanda {=docker run --name web -d nginx =docker run -d --name web nginx}

::05u013:: [markdown] Vizualizarea listei de containere care rulează se poate face cu ajutorul comenzii {=docker ps}

::05u014:: [markdown] Vizualizarea listei de toate containerele se poate face cu ajutorul comenzii {=docker ps -a}

::05u015:: [markdown] Executarea comenzii `/etc/init.d/nginx reload` în containerul `nginx` care rulează se poate face cu ajutorul comenzii {=docker exec nginx /etc/init.d/nginx reload}

::05u016:: [markdown] Executarea comenzii `php /var/www/html/cli/cleancache.php` în containerul `php-fpm` care rulează se poate face cu ajutorul comenzii {=docker exec php-fpm php /var/www/html/cli/cleancache.php}

::05u017:: [markdown] Pentru a porni aplicatia `bash` în containerul `debian` care rulează cu modul interactiv activat, se utilizează comanda {=docker exec -it debian bash =docker exec -i -t debian bash =docker exec -t -i debian bash =docker exec -t -i debian bash =docker exec -ti debian bash}
  
::05u018:: [markdown] Pentru a opri containerul `mycontainer`, se utilizează comanda {=docker stop mycontainer}

::05u019:: [markdown] Pentru a șterge containerul `mycontainer`, se utilizează comanda {=docker rm mycontainer}

::05u020:: [markdown] Pentru a reporni containerul `mc`, se utilizează comanda {=docker restart mc}

::05u021:: [markdown] Pentru vizualizarea jurnalelor containerului `php-fpm`, se utilizează comanda {=docker logs php-fpm}

::05u022:: [markdown] Pentru vizualizarea jurnalelor containerului `web` în modul `follow`, se utilizează comanda {=docker logs -f mysql =docker logs --follow mysql}

::05u023:: [markdown] Pentru copierea fișierului `index.html` din containerul `web` din directorul `/var/www/html` în directorul local `./html`, se utilizează comanda {=docker cp web\:/var/www/html/index.html ./html =docker cp web\:/var/www/html/index.html ./html/ =docker cp web\:/var/www/html/index.html html/ =docker cp web\:/var/www/html/index.html html}

::05u024:: [markdown] Pentru copierea fișierului `index.html` din directorul local `./html` în directorul `/var/www/html` al containerului `web`, se utilizează comanda {=docker cp ./html/index.html web\:/var/www/html =docker cp ./html/index.html web\:/var/www/html/ =docker cp html/index.html web\:/var/www/html =docker cp html/index.html web\:/var/www/html/}
  
::05u025:: [markdown] În container în baza imaginii `myserver` poate fi pornită comanda `/bin/sh` cu ajutorul comenzii {=docker run -it myserver /bin/sh =docker run -i -t myserver /bin/sh =docker run -t -i myserver /bin/sh =docker run -ti myserver /bin/sh}
